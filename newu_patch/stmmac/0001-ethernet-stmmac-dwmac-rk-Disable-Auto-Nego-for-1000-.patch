From 4d30558636b50019b4615fbb49b4b616b5a60c3a Mon Sep 17 00:00:00 2001
From: David Wu <david.wu@rock-chips.com>
Date: Mon, 18 Sep 2023 19:01:45 +0800
Subject: [PATCH] ethernet: stmmac: dwmac-rk: Disable Auto Nego for 1000 Base-x
 sgmii

If fixed link is used for sgmii, it can be considered as 1000base-x mode,
disable auto nego function.

Signed-off-by: David Wu <david.wu@rock-chips.com>
Change-Id: I7e742b573c043d31c38a7b7fa2535afa82e61a8b
---
 .../net/ethernet/stmicro/stmmac/dwmac-rk.c    | 55 ++++++++++++-------
 1 file changed, 35 insertions(+), 20 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
index d945d921d358..640b479c4114 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
@@ -26,6 +26,7 @@
 #include <linux/module.h>
 #include <linux/nvmem-consumer.h>
 #include <linux/of_gpio.h>
+#include <linux/of_mdio.h>
 #include <linux/of_device.h>
 #include <linux/platform_device.h>
 #include <linux/regulator/consumer.h>
@@ -170,44 +171,58 @@ static int xpcs_soft_reset(struct rk_priv_data *bsp_priv, int dev)
 
 static int xpcs_setup(struct rk_priv_data *bsp_priv, int mode)
 {
+	struct device_node *np = bsp_priv->pdev->dev.of_node;
 	int ret, i, id = bsp_priv->bus_id;
+	bool is_fixed_link;
 	u32 val;
 
 	if (mode == PHY_INTERFACE_MODE_QSGMII && !id)
 		return 0;
 
+	is_fixed_link = of_phy_is_fixed_link(np);
+
 	ret = xpcs_soft_reset(bsp_priv, 0);
 	if (ret) {
 		dev_err(&bsp_priv->pdev->dev, "xpcs_soft_reset fail %d\n", ret);
 		return ret;
 	}
 
-	xpcs_write(bsp_priv, SR_MII_OFFSET(0) + VR_MII_AN_INTR_STS, 0x0);
-	xpcs_write(bsp_priv, SR_MII_OFFSET(0) + VR_MII_LINK_TIMER_CTRL, 0x1);
+	if (!is_fixed_link) {
+		xpcs_write(bsp_priv, SR_MII_OFFSET(0) + VR_MII_AN_INTR_STS, 0x0);
+		xpcs_write(bsp_priv, SR_MII_OFFSET(0) + VR_MII_LINK_TIMER_CTRL, 0x1);
 
-	if (mode == PHY_INTERFACE_MODE_SGMII)
-		xpcs_write(bsp_priv, SR_MII_OFFSET(0) + VR_MII_AN_CTRL,
-			   VR_MII_CTRL_SGMII_AN_EN);
-	else
-		xpcs_write(bsp_priv, SR_MII_OFFSET(0) + VR_MII_AN_CTRL,
-			   VR_MII_CTRL_QSGMII_AN_EN);
+		if (mode == PHY_INTERFACE_MODE_SGMII)
+			xpcs_write(bsp_priv, SR_MII_OFFSET(0) + VR_MII_AN_CTRL,
+				   VR_MII_CTRL_SGMII_AN_EN);
+		else
+			xpcs_write(bsp_priv, SR_MII_OFFSET(0) + VR_MII_AN_CTRL,
+				   VR_MII_CTRL_QSGMII_AN_EN);
+	}
 
 	if (mode == PHY_INTERFACE_MODE_QSGMII) {
 		for (i = 0; i < 4; i++) {
-			val = xpcs_read(bsp_priv,
-					SR_MII_OFFSET(i) + VR_MII_DIG_CTRL1);
-			xpcs_write(bsp_priv,
-				   SR_MII_OFFSET(i) + VR_MII_DIG_CTRL1,
-				   val | MII_MAC_AUTO_SW);
-			xpcs_write(bsp_priv, SR_MII_OFFSET(i) + MII_BMCR,
-				   SR_MII_CTRL_AN_ENABLE);
+			if (!is_fixed_link) {
+				val = xpcs_read(bsp_priv,
+						SR_MII_OFFSET(i) + VR_MII_DIG_CTRL1);
+				xpcs_write(bsp_priv,
+					   SR_MII_OFFSET(i) + VR_MII_DIG_CTRL1,
+					   val | MII_MAC_AUTO_SW);
+				xpcs_write(bsp_priv, SR_MII_OFFSET(i) + MII_BMCR,
+					   SR_MII_CTRL_AN_ENABLE);
+			} else {
+				xpcs_write(bsp_priv, SR_MII_OFFSET(i) + MII_BMCR,
+					   BMCR_FULLDPLX | BMCR_SPEED1000);
+			}
 		}
 	} else {
-		val = xpcs_read(bsp_priv, SR_MII_OFFSET(0) + VR_MII_DIG_CTRL1);
-		xpcs_write(bsp_priv, SR_MII_OFFSET(0) + VR_MII_DIG_CTRL1,
-			   val | MII_MAC_AUTO_SW);
-		xpcs_write(bsp_priv, SR_MII_OFFSET(0) + MII_BMCR,
-			   SR_MII_CTRL_AN_ENABLE);
+		if (!is_fixed_link) {
+			val = xpcs_read(bsp_priv, SR_MII_OFFSET(0) + VR_MII_DIG_CTRL1);
+			xpcs_write(bsp_priv, SR_MII_OFFSET(0) + VR_MII_DIG_CTRL1,
+				   val | MII_MAC_AUTO_SW);
+		} else {
+			xpcs_write(bsp_priv, SR_MII_OFFSET(0) + MII_BMCR,
+				   BMCR_FULLDPLX | BMCR_SPEED1000);
+		}
 	}
 
 	return ret;
-- 
2.25.1

